พื้นฐานที่ควรมีก่อนจะอ่าน codeภาษา c / c++  เป็น คือ array []
หากเข้าใจ  array 1-2 มิติ ได้ จะสามารถเข้าใจถึงการส่งค่าเก็บค่าและโยนค่า 
ที่เหลือจะเป็นการเรียกใช้งานฟังก์ชัน และชื่อตัวแปรที่ลายตา 
------------------------------------------------------------------
	1.ฟังก์ชันแบบพารามิเตอร์ (Parameter Function) ฟังก์ชันประเภทนี้จะรับข้อมูลเข้าผ่านทางพารามิเตอร์ที่ระบุในวงเล็บขณะเรียกใช้  และอาจมีการคืนค่าที่เรียกว่า return เพื่อนำผลลพไปใช้งานในการทำงานอื่นต่อ 
เช่น void setSpeed(int speed) {
    // โค้ดเพื่อควบคุมความเร็วของมอเตอร์
	return speed เอาค่า speed ออกไปใช้งานภายนอกต่อ ไม่ต้องเก็บไว้ 
}
x = 5;
you = setspeed(x) ; หมายความว่า you จะเป็นตัวเก็บผมลัพที่คำนวณมาแล้วจากฟังชั้นนั่นเอง
----------------------------------------------------------------
	2.ฟังก์ชันที่ไม่คืนค่า (Void Function)
ฟังก์ชันประเภทนี้จะไม่คืนค่ากลับเมื่อถูกเรียกใช้และไม่รับค่าใดๆด้วย ซึ่งถูกประกาศด้วยคีย์เวิร์ด void 
void printMessage() {
    Serial.println("Hello, World!");
}
you[] = printMessage(); หมายความว่า you จะเก็บคำ hello wolrd เอาไว้  

------------------------------------------------------------
	3.ฟังก์ชันที่คืนค่า (Return Function) จะคล้ายกับ Parameter Function แต่ฟังก์ชันที่คืนค่าจะส่งค่าผลลัพธ์กลับไปยังฟังก์ชันที่เรียกใช้ โดยมีการระบุประเภทของค่าที่คืน เช่น int, float, char, double หรือ boolเท่านั้น คือ  int ก็คืนให้ int , char ก็คืนให้ char จับคู่กัน 
int add(int a, int b) {
    return a + b;
}
จะต้องเป็น int you = add(2,3); ถึงจะสามารถใช้งานได้  เป็น float you ไม่ได้ 
	int, float, char, double หรือ bool คือ ประเภทของข้อมูล จน.เต็ม , จน.ทศนิยม ,ตัวหนังสือ , จน.ทศนิยมหลายตำแหน่งมากๆ , ตรรกะ  true fulse ตามลำดับ

--------------------------------------------------------
uint8_t มักจะถูกใช้ในงานที่ต้องการประหยัดหน่วยความจำ เช่น การจัดการข้อมูลที่ใช้พื้นที่น้อย หรือการทำงานกับฮาร์ดแวร์ที่มีข้อจำกัด
ใช้สำหรับการจัดเก็บค่าที่แน่นอน เช่น การเก็บค่าเซ็นเซอร์ที่มีค่าระหว่าง 0 ถึง 255 หรือการตั้งค่า GPIO

---------------------------------------------------------------
Muxchannal controlคือพินที่ใช้ควบคุมการเลือกช่องสัญญาณของ Multiplexer
ค่าจาก muxChannel[analog_CH][x] ถูกนำไปเขียน (digitalWrite) ไปยังพินควบคุม (A1, A2, A3) เพื่อตั้งค่าให้ Multiplexer เลือกช่องที่ต้องการอ่านค่า
หลังจากนั้น ค่าที่อ่านได้จากช่องนั้นจะถูกอ่านผ่านฟังก์ชัน analogRead(A0)
การใช้ muxChannel ในโค้ดนี้เป็นการตั้งค่าขาเลือกของ Multiplexer เพื่อเลือกช่องสัญญาณที่ต้องการอ่าน ซึ่งช่วยให้คุณสามารถอ่านค่าจากเซ็นเซอร์หลายตัวได้ โดยใช้พอร์ตแอนะล็อกเพียงขาเดียวของไมโครคอนโทรลเลอร์ นี่เป็นวิธีที่มีประสิทธิภาพสำหรับการจัดการหลายเซ็นเซอร์ในหุ่นยนต์ตามเส้น
int ADC_read(int analog_CH) {
  int val = 0;
  if (analog_CH < 8 ) {                 // ตรวจสอบว่าเป็นช่องอะนาล็อก 0-7 หรือไม่
    pinMode(A1, OUTPUT);                // ตั้งค่าให้พอร์ต A1 เป็น output
    pinMode(A2, OUTPUT);                // ตั้งค่าให้พอร์ต A2 เป็น output
    pinMode(A3, OUTPUT);                // ตั้งค่าให้พอร์ต A3 เป็น output
    int controlPin[] = {27, 28, 29};    // พอร์ตควบคุม MUX
    int muxChannel[8][3] = {{1, 1, 1},{1, 1, 0}, {1, 0, 1}, {1, 0, 0}, {0, 1, 1}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}};  // ค่าที่ใช้ในการควบคุม MUX
    digitalWrite(A3, muxChannel[analog_CH][0]);  // กำหนดค่าที่พอร์ต A3
    digitalWrite(A2, muxChannel[analog_CH][1]);  // กำหนดค่าที่พอร์ต A2
    digitalWrite(A1, muxChannel[analog_CH][2]);  // กำหนดค่าที่พอร์ต A1
    val = analogRead(A0);                         // อ่านค่าอะนาล็อกที่พอร์ต A0
  }
  return val;  // ส่งค่ากลับ
}

คำอธิบายโค้ด

int ADC_read(int analog_CH)
ประกาศฟังก์ชัน ADC_read ที่รับพารามิเตอร์เป็นช่องอะนาล็อก (0-7) ที่ต้องการอ่านค่า

int val = 0;
ประกาศตัวแปร val เพื่อเก็บค่าสัญญาณอะนาล็อกที่อ่านได้จาก MUX

if (analog_CH < 8 )
ตรวจสอบว่าช่องอะนาล็อกที่ส่งเข้ามาอยู่ในช่วง 0-7 ซึ่งเป็นช่วงที่ MUX สามารถจัดการได้

pinMode(A1, OUTPUT);
ตั้งค่าให้พอร์ต A1 เป็น output ซึ่งจะใช้ในการควบคุม MUX

pinMode(A2, OUTPUT);
ตั้งค่าให้พอร์ต A2 เป็น output ซึ่งจะใช้ในการควบคุม MUX

pinMode(A3, OUTPUT);
ตั้งค่าให้พอร์ต A3 เป็น output ซึ่งจะใช้ในการควบคุม MUX

int controlPin[] = {27, 28, 29};
ประกาศอาร์เรย์ controlPin ซึ่งเก็บพอร์ตที่ใช้ควบคุม MUX

int muxChannel[8][3] = {...};
ประกาศอาร์เรย์สองมิติ muxChannel ซึ่งเก็บชุดบิตที่ใช้ในการควบคุม MUX ให้เลือกช่องต่าง ๆ (0-7)

digitalWrite(A3, muxChannel[analog_CH][0]);
กำหนดค่าที่พอร์ต A3 ตามค่าที่กำหนดไว้ใน muxChannel สำหรับช่องอะนาล็อกที่เลือก

digitalWrite(A2, muxChannel[analog_CH][1]);
กำหนดค่าที่พอร์ต A2 ตามค่าที่กำหนดไว้ใน muxChannel สำหรับช่องอะนาล็อกที่เลือก

digitalWrite(A1, muxChannel[analog_CH][2]);
กำหนดค่าที่พอร์ต A1 ตามค่าที่กำหนดไว้ใน muxChannel สำหรับช่องอะนาล็อกที่เลือก

val = analogRead(A0);
อ่านค่าสัญญาณอะนาล็อกจากพอร์ต A0 (ซึ่งจะเป็นค่าที่ MUX เลือกมาแล้ว)

return val;
ส่งค่าที่อ่านได้จาก MUX กลับไปยังฟังก์ชันที่เรียกใช้
-
------------------------------------------------------------
abs() ในภาษา C/C++ (รวมถึงภาษาอื่นๆ) ใช้สำหรับคำนวณและคืนค่าตัวเลขที่เป็น ค่าสัมบูรณ์ (absolute value) ของตัวเลขที่ระบุ เช่น abs(-5) จะให้ค่าเป็น 5
ใน code => abs(speed_Motor) ใช้ในการแปลงค่าความเร็ว (speed_Motor) ให้เป็นค่าสัมบูรณ์ ถ้าค่า speed_Motor เป็นลบ ฟังก์ชันนี้จะเปลี่ยนค่าให้เป็นบวก เพื่อใช้ในการคำนวณค่าพลังงานที่จะส่งไปยังมอเตอร์
การใช้ abs() ในสถานการณ์นี้ช่วยให้สามารถจัดการความเร็วในทิศทางต่างๆ ได้โดยไม่ต้องสนใจเครื่องหมายลบ

-------------------------------------------------------
int ReadLightSensor(int analog_CH) {  
  int value = 0;
  if(FrontLineColor == 0)value= map(ADC_read(_sensorPins[analog_CH]), _min_sensor_values[analog_CH], _max_sensor_values[analog_CH], 100, 0);          // แปลงค่าเซ็นเซอร์ตามการตั้งค่าสีเส้น (กรณีเส้นสีขาว)
  else if (FrontLineColor == 1) value= map(ADC_read(_sensorPins[analog_CH]), _min_sensor_values[analog_CH], _max_sensor_values[analog_CH], 0, 100);  // แปลงค่าเซ็นเซอร์ตามการตั้งค่าสีเส้น (กรณีเส้นสีดำ)
  if(value < 0)value = 0;          // ถ้าค่าที่อ่านได้น้อยกว่า 0 ให้ปรับเป็น 0
  else if(value >100)value = 100;  // ถ้าค่าที่อ่านได้มากกว่า 100 ให้ปรับเป็น 100
  return value;                    // ส่งค่ากลับให้ฟังชันใช้งาน 
}
คำอธิบายโค้ด	ReadLightSensor มีบทบาทสำคัญในการตรวจสอบว่าหุ่นยนต์อยู่บนเส้นหรือไม่ และตำแหน่งของหุ่นยนต์บนเส้นนั้นเป็นอย่างไร ข้อมูลที่ได้จากฟังก์ชันนี้จะถูกนำไปใช้ในกระบวนการควบคุม เช่น ในฟังก์ชัน lineFollow_PID() ที่ใช้การควบคุม PID เพื่อปรับความเร็วของมอเตอร์ซ้ายและขวาเพื่อให้หุ่นยนต์สามารถติดตามเส้นได้อย่างแม่นยำ.
	อ่านค่าจากเซ็นเซอร์:
	- ADC_read(_sensorPins[analog_CH]) จะถูกเรียกเพื่ออ่านค่าจากเซ็นเซอร์วัดแสงที่เชื่อมต่ออยู่กับพอร์ตอนาล็อกที่ระบุด้วย analog_CH
ค่าเหล่านี้จะอยู่ในช่วง 0 ถึง 1023 เนื่องจากเป็นผลลัพธ์จากการแปลงค่าแอนะล็อกเป็นดิจิทัล (ADC) บนไมโครคอนโทรลเลอร์
การปรับสเกลค่า:
	 map() ถูกใช้เพื่อแปลงค่าที่อ่านได้ให้อยู่ในช่วงที่เหมาะสมสำหรับการทำงานของหุ่นยนต์ โดยการแปลงจากช่วงค่าที่เซ็นเซอร์อ่านได้ (ระหว่าง _min_sensor_values[analog_CH] และ _max_sensor_values[analog_CH]) ไปยังช่วง 0 ถึง 100
การแปลงค่านี้ขึ้นอยู่กับว่าเส้นที่หุ่นยนต์ติดตามมีสีอะไร (FrontLineColor):
ถ้า FrontLineColor == 0 หมายถึงเส้นเป็นสีขาว (พื้นเป็นสีดำ) ค่าจะถูกแปลงจาก 100 ไปเป็น 0
ถ้า FrontLineColor == 1 หมายถึงเส้นเป็นสีดำ (พื้นเป็นสีขาว) ค่าจะถูกแปลงจาก 0 ไปเป็น 100
	การตรวจสอบขอบเขตของค่า
	าค่าที่แปลงแล้วต่ำกว่า 0 หรือสูงกว่า 100 จะถูกบังคับให้อยู่ในช่วง 0 ถึง 100 เพื่อป้องกันข้อผิดพลาดที่อาจเกิดขึ้น
	-คืนค่า 
ฟังก์ชันจะคืนค่าที่แปลงแล้วให้กับผู้เรียกใช้งาน เพื่อนำไปใช้ในขั้นตอนถัดไป เช่น การควบคุมมอเตอร์หรือการตัดสินใจอื่นๆ


-------------------------------------------------------------------
void setCalibrate(int cal_round) {  
  for (uint8_t i = 0; i < _NumofSensor; i++){
    _max_sensor_values[i] = 0;                // รีเซ็ตค่าสูงสุดของเซ็นเซอร์
    _min_sensor_values[i] = 1023;             // รีเซ็ตค่าต่ำสุดของเซ็นเซอร์
  }
  
  for (int round_count = 0; round_count < cal_round; round_count ++ ) {
    for (uint8_t i = 0; i < _NumofSensor; i++) {
      if (ADC_read(_sensorPins[i]) > _max_sensor_values[i] ) {
        _max_sensor_values[i]  = ADC_read(_sensorPins[i]);               // อัปเดตค่าสูงสุดของเซ็นเซอร์
        if (_max_sensor_values[i] > 1023 )_max_sensor_values[i] = 1023;  // จำกัดค่าที่ 1023
      }
    }
    for (uint8_t i = 0; i < _NumofSensor; i++) {
      if (ADC_read(_sensorPins[i]) < _min_sensor_values[i] ) {
        _min_sensor_values[i] = ADC_read(_sensorPins[i]);            // อัปเดตค่าต่ำสุดของเซ็นเซอร์
        if (_min_sensor_values[i] < 0) _min_sensor_values[i] = 0;  // จำกัดค่าที่ 0
      }
    }
    delay(5);  // หน่วงเวลา 5 มิลลิวินาทีเพื่อรอการอ่านค่าต่อไป
  }
}

คำอธิบายโค้ด
	setCalibrate(int cal_round) มีหน้าที่ในการปรับเทียบ (calibrate) เซ็นเซอร์วัดแสงหรือเซ็นเซอร์ติดตามเส้นที่อยู่บนหุ่นยนต์ โดยการตรวจสอบและบันทึกค่าสูงสุด (_max_sensor_values) และค่าต่ำสุด (_min_sensor_values) ที่แต่ละเซ็นเซอร์สามารถอ่านได้ระหว่างการทำงานจริง ฟังก์ชันนี้ช่วยให้หุ่นยนต์สามารถรับรู้ค่าที่แท้จริงของพื้นและเส้นได้ดีขึ้น ซึ่งส่งผลให้หุ่นยนต์ติดตามเส้นได้อย่างแม่นยำ
	รีเซ็ตค่าสูงสุดและค่าต่ำสุดของเซ็นเซอร์:
ในบรรทัดแรกของฟังก์ชัน มีการวนลูปเพื่อตั้งค่า _max_sensor_values ของแต่ละเซ็นเซอร์เป็น 0 และ _min_sensor_values เป็น 1023
การรีเซ็ตนี้จะทำให้มั่นใจได้ว่าการปรับเทียบใหม่จะไม่ได้รับผลกระทบจากค่าที่อ่านมาก่อนหน้านี้
	ปรับเทียบเซ็นเซอร์ (Calibration Loop):
ฟังก์ชันจะวนลูปตามจำนวนครั้งที่กำหนดใน cal_round ซึ่งบ่งบอกถึงจำนวนรอบที่ต้องการให้หุ่นยนต์ปรับเทียบเซ็นเซอร์
	อ่านและอัปเดตค่าสูงสุด:
ภายในลูป for ตัวแรกของแต่ละรอบ การอ่านค่าจากเซ็นเซอร์ (ADC_read) จะถูกเปรียบเทียบกับค่าสูงสุดที่บันทึกไว้ (_max_sensor_values[i])
หากค่าที่อ่านได้มากกว่าค่าที่บันทึกไว้ ฟังก์ชันจะอัปเดตค่าสูงสุด และถ้าค่าที่อ่านได้มากกว่า 1023 จะถูกบันทึกเป็น 1023 (ขีดจำกัดสูงสุดของค่าที่เซ็นเซอร์สามารถอ่านได้)
	อ่านและอัปเดตค่าต่ำสุด:
ในลูป for ที่สอง ฟังก์ชันจะทำงานในลักษณะเดียวกันกับการอัปเดตค่าต่ำสุด (_min_sensor_values[i])
หากค่าที่อ่านได้ต่ำกว่าค่าที่บันทึกไว้ ฟังก์ชันจะอัปเดตค่าต่ำสุด และถ้าค่าที่อ่านได้ต่ำกว่า 0 จะถูกบันทึกเป็น 0 (ขีดจำกัดต่ำสุดของค่าที่เซ็นเซอร์สามารถอ่านได้)
	หน่วงเวลา:
หลังจากการอ่านและอัปเดตค่าเสร็จสิ้น จะมีการหน่วงเวลา 5 มิลลิวินาที (delay(5)) ก่อนที่จะเริ่มอ่านค่าของรอบถัดไป
การหน่วงเวลานี้ช่วยให้หุ่นยนต์มีเวลาที่จะขยับหรือเปลี่ยนตำแหน่งก่อนที่จะอ่านค่าจากเซ็นเซอร์ในรอบถัดไป

----------------------------------------------------------
int readline() {  
  bool onLine = false;  // ตรวจสอบว่าหุ่นยนต์อยู่บนเส้นหรือไม่
  long avg = 0;         // เก็บค่าเฉลี่ยตำแหน่งของเส้น
  long sum = 0;         // เก็บผลรวมของค่าที่อ่านได้จากเซ็นเซอร์
  for (uint8_t i = 0; i < _NumofSensor; i++) {
    long value = ReadLightSensor(i);         // อ่านค่าแสงจากเซ็นเซอร์
    if (value > _Sensitive) {  
      onLine = true;                         // ถ้าค่าที่อ่านได้มากกว่าความไวที่ตั้งไว้ แสดงว่าหุ่นยนต์อยู่บนเส้น
    }
    if (value > 5) {
      avg += (long)value * (i * 100);  // คำนวณตำแหน่งของเส้น
      sum += value;                    // เก็บผลรวมของค่าที่อ่านได้
    }
  }
  if (!onLine) {                                     // ถ้าหุ่นยนต์ไม่พบเส้น
    if (_lastPosition < (_NumofSensor - 1) * 100 / 2) {
      return 0;                                     // ส่งค่าตำแหน่งที่เป็นจุดเริ่มต้น
    }
    else {
      return (_NumofSensor - 1) * 100;              // ส่งค่าตำแหน่งที่เป็นจุดสิ้นสุด
    }
  }
  _lastPosition = avg / sum;                       // คำนวณตำแหน่งล่าสุดของเส้น
  return _lastPosition;                            // ส่งค่าตำแหน่งล่าสุดของเส้น
}

คำอธิบายโค้ด
	readline() มีหน้าที่ในการคำนวณตำแหน่งของเส้นที่หุ่นยนต์กำลังติดตาม โดยการอ่านค่าแสงจากเซ็นเซอร์หลายตัวที่ติดตั้งอยู่บนหุ่นยนต์ ฟังก์ชันนี้ใช้สำหรับระบบติดตามเส้น (line following) เพื่อให้หุ่นยนต์สามารถปรับการเคลื่อนไหวให้ตรงกับเส้นที่กำลังติดตามได้อย่างแม่นยำ
	การกำหนดตัวแปรเริ่มต้น:
-onLine ถูกตั้งค่าเป็น false เพื่อใช้ในการตรวจสอบว่าหุ่นยนต์พบเส้นหรือไม่
-avg และ sum ถูกตั้งค่าเป็น 0 เพื่อเก็บค่าสะสมสำหรับการคำนวณตำแหน่งของเส้นและผลรวมของค่าที่อ่านได้จากเซ็นเซอร์
	การอ่านค่าเซ็นเซอร์:
ฟังก์ชันจะวนลูปผ่านเซ็นเซอร์ทั้งหมดที่ติดตั้งอยู่บนหุ่นยนต์ (จาก 0 ถึง _NumofSensor - 1)
สำหรับแต่ละเซ็นเซอร์ จะเรียกใช้ฟังก์ชัน ReadLightSensor(i) เพื่ออ่านค่าแสงที่เซ็นเซอร์นั้นตรวจจับได้
	การตรวจสอบเส้น:
-ถ้าค่าที่อ่านได้จากเซ็นเซอร์ใดๆ มากกว่าค่าความไวที่ตั้งไว้ (_Sensitive), onLine จะถูกตั้งค่าเป็น true แสดงว่าหุ่นยนต์พบเส้น
-ถ้าค่าที่อ่านได้มากกว่า 5, ค่านั้นจะถูกนำมาใช้ในการคำนวณตำแหน่งของเส้น โดยการคูณค่าที่อ่านได้กับตำแหน่งของเซ็นเซอร์และสะสมไว้ใน avg
-ค่า value จะถูกสะสมไว้ใน sum เพื่อใช้ในการคำนวณค่าเฉลี่ยต่อไป
	การจัดการกรณีที่ไม่พบเส้น:
-ถ้าไม่มีเซ็นเซอร์ใดๆ พบเส้น (onLine ยังคงเป็น false), ฟังก์ชันจะตรวจสอบตำแหน่งล่าสุดของเส้น (_lastPosition)
-ถ้าตำแหน่งล่าสุดอยู่ในครึ่งแรกของเซ็นเซอร์, ฟังก์ชันจะส่งค่าตำแหน่งที่เป็นจุดเริ่มต้น (0)
-ถ้าตำแหน่งล่าสุดอยู่ในครึ่งหลังของเซ็นเซอร์, ฟังก์ชันจะส่งค่าตำแหน่งที่เป็นจุดสิ้นสุด ((_NumofSensor - 1) * 100)
	การคำนวณและส่งค่าตำแหน่งของเส้น:
-ถ้าพบเส้น, ฟังก์ชันจะคำนวณตำแหน่งของเส้น (_lastPosition) โดยการหารค่าเฉลี่ย (avg / sum)
-สุดท้าย, ฟังก์ชันจะส่งค่าตำแหน่งของเส้น (_lastPosition) กลับไปยังฟังก์ชันที่เรียกใช้

----------------------------------------------------------
void lineFollow_PID(int RUN_PID_speed , float RUN_PID_KP, float RUN_PID_KI, float RUN_PID_KD) {
  int speed_PID = RUN_PID_speed;                                                        // ความเร็วเริ่มต้นที่ใช้ใน PID
  int present_position = readline();                                                   // อ่านตำแหน่งของเส้นปัจจุบัน
  int setpoint = ((_NumofSensor - 1) * 100) / 2;                                       // กำหนดจุดมุ่งหมาย (จุดกึ่งกลางของเส้น)
  errors = present_position - setpoint;                                                // คำนวณค่า error จากตำแหน่งปัจจุบัน
  if (errors == 0) integral = 0;                                                       // ถ้า error เป็น 0 ให้รีเซ็ตค่า integral
  integral = integral + errors;                                                        // คำนวณค่า integral ของ error
  derivative = (errors - previous_error);                                              // คำนวณค่า derivative ของ error
  output = RUN_PID_KP * errors  + RUN_PID_KI * integral + RUN_PID_KD * derivative;     // คำนวณ output จากค่า KP, KI, KD
  int motorL = constrain(RUN_PID_speed + output, -100, 100);                           // จำกัดค่าความเร็วของมอเตอร์ซ้ายให้อยู่ในช่วง -100 ถึง 100
  int motorR = constrain(RUN_PID_speed - output, -100, 100);                           // จำกัดค่าความเร็วของมอเตอร์ขวาให้อยู่ในช่วง -100 ถึง 100
  motor(1,motorL);                                                                     // ควบคุมมอเตอร์ซ้าย
  motor(2,motorR);                                                                     // ควบคุมมอเตอร์ขวา
  previous_error = errors;                                                             // อัปเดตค่า error ล่าสุดเพื่อใช้ในการคำนวณ derivative รอบถัดไป
}

int speed_PID = RUN_PID_speed;
กำหนดความเร็วเริ่มต้นของ PID ซึ่งเป็นค่าที่ผู้ใช้ตั้งค่าไว้เพื่อใช้ในการควบคุมความเร็วของหุ่นยนต์

int present_position = readline();
อ่านตำแหน่งปัจจุบันของเส้นที่หุ่นยนต์ติดตามอยู่ โดยใช้ฟังก์ชัน readline() ที่คำนวณตำแหน่งเส้นจากค่าที่อ่านได้จากเซ็นเซอร์

int setpoint = ((_NumofSensor - 1) * 100) / 2;
กำหนดจุดมุ่งหมายที่หุ่นยนต์ต้องการให้เส้นอยู่ตรงกลางของเซ็นเซอร์ ซึ่งคำนวณจากจำนวนเซ็นเซอร์ที่ติดตั้งอยู่บนหุ่นยนต์

errors = present_position - setpoint;
คำนวณค่า error ซึ่งคือความแตกต่างระหว่างตำแหน่งของเส้นที่ตรวจพบกับจุดมุ่งหมาย (setpoint)

if (errors == 0) integral = 0;
ถ้าค่า error เป็น 0 (แสดงว่าหุ่นยนต์อยู่ตรงจุดกลางที่ต้องการ) ให้รีเซ็ตค่า integral เป็น 0

integral = integral + errors;
คำนวณค่า integral โดยการสะสมค่า error เพื่อใช้ในการคำนวณการปรับตัวที่สอดคล้องกับการสะสมของความผิดพลาด

derivative = (errors - previous_error);
คำนวณค่า derivative โดยหาความแตกต่างของ error ในรอบปัจจุบันกับ error ในรอบก่อนหน้า

output = RUN_PID_KP * errors + RUN_PID_KI * integral + RUN_PID_KD * derivative;
คำนวณค่า output ที่ใช้ในการปรับการควบคุมหุ่นยนต์ โดยใช้สูตร PID ซึ่งประกอบด้วยค่าของ KP (Proportional), KI (Integral) และ KD (Derivative)

int motorL = constrain(RUN_PID_speed + output, -100, 100);
คำนวณความเร็วของมอเตอร์ด้านซ้ายโดยรวมค่าของ output ที่คำนวณได้ และจำกัดความเร็วให้อยู่ในช่วง -100 ถึง 100 เพื่อป้องกันไม่ให้มอเตอร์ทำงานเกินขีดจำกัด

int motorR = constrain(RUN_PID_speed - output, -100, 100);
คำนวณความเร็วของมอเตอร์ด้านขวาด้วยวิธีเดียวกันกับมอเตอร์ซ้าย โดยใช้สูตรที่เหมาะสมสำหรับการติดตามเส้น

motor(1,motorL);
ควบคุมการทำงานของมอเตอร์ซ้ายด้วยค่าความเร็วที่คำนวณได้จาก PID

motor(2,motorR);
ควบคุมการทำงานของมอเตอร์ขวาด้วยค่าความเร็วที่คำนวณได้จาก PID

previous_error = errors;
อัปเดตค่า error ล่าสุดเพื่อใช้ในการคำนวณค่า derivative ในรอบถัดไป
